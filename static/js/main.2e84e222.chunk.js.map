{"version":3,"sources":["NavBar.js","About.js","Home.js","Vis.js","Title.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","role","aria-label","to","id","About","Home","Visual","Title","App","exact","path","Vis","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAiBeA,MAdf,WACI,OACI,yBAAKC,UAAU,iBAAiBC,KAAK,aAAaC,aAAW,mBACzD,yBAAKF,UAAU,eACX,yBAAKA,UAAU,gBACX,kBAAC,IAAD,CAAMA,UAAU,6DAA6DG,GAAG,KAAhF,SACA,kBAAC,IAAD,CAAMC,GAAG,cAAcJ,UAAU,6DAA6DG,GAAG,mBAAjG,mBACA,kBAAC,IAAD,CAAMH,UAAU,6DAA6DG,GAAG,aAAhF,iBCELE,MAVf,WACE,OACE,6BACE,2CCyCSC,MA5Cf,WACI,OACI,6BACI,yBAAKN,UAAU,oCACX,wBAAIA,UAAU,SAAd,SACA,sTASJ,yBAAKA,UAAU,oCACX,wBAAIA,UAAU,SAAd,YACA,ohCCNDO,MAVf,WACI,OACI,6BACI,wCCOGC,MAVf,WACI,OACI,yBAAKR,UAAU,6CACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,SAAd,kB,MCiCDS,MAxBf,WACE,OACE,kBAAC,IAAD,KAEE,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,aAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,mBAChB,kBAACC,EAAD,UCnBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2e84e222.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nfunction NavBar() {\n    return (\n        <nav className=\"navbar is-dark\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-menu\">\n                <div className=\"navbar-start\">\n                    <Link className=\"navbar-item is-expanded has-text-weight-semibold is-size-5\" to=\"/\">/home</Link>\n                    <Link id=\"center-item\" className=\"navbar-item is-expanded has-text-weight-semibold is-size-5\" to=\"/visualizations\">/visualizations</Link>\n                    <Link className=\"navbar-item is-expanded has-text-weight-semibold is-size-5\" to=\"/about_us\">/about_us</Link>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default NavBar;","import React from 'react';\n\nfunction About() {\n  return (\n    <div>\n      <h1>\n          About us:\n      </h1>\n    </div>\n  );\n}\n\nexport default About;","import React from 'react';\n\nfunction Home() {\n    return (\n        <div>\n            <div className=\"section has-background-white-ter\">\n                <h1 className=\"title\">About</h1>\n                <p>\n                But I must explain to you how all this mistaken \n                idea of denouncing of a pleasure and praising \n                pain was born and I will give you a complete \n                account of the system, and expound the actual \n                teachings of the great explorer of the truth, \n                the master-builder of human happiness: dat ass.\n                </p>\n            </div>\n            <div className=\"section has-background-white-ter\">\n                <h1 className=\"title\">Progress</h1>\n                <p>\n                To take a trivial example, which of us ever \n                undertakes laborious physical exercise, except to \n                obtain some advantage from it? But who has any right \n                to find fault with a man who chooses to enjoy a \n                pleasure that has no annoying consequences, or one \n                who avoids a pain that produces no resultant \n                pleasure? On the other hand, we denounce with \n                righteous indignation and dislike men who are so \n                beguiled and demoralized by the charms of pleasure of \n                the moment, so blinded by desire, that they cannot \n                foresee the pain and trouble that are bound to \n                ensue; and equal blame belongs to those who fail \n                in their duty through weakness of will, which is the \n                same as saying through shrinking from toil and pain. \n                These cases are perfectly simple and easy to \n                distinguish. In a free hour, when our power of \n                choice is untrammeled and when nothing prevents our \n                being able to do what we like best, every pleasure is \n                to be welcomed and every pain avoided. But in certain \n                circumstances and owing to the claims of duty or \n                the obligations.\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nfunction Visual() {\n    return (\n        <div>\n            <h1>\n                Visual\n            </h1>\n        </div>\n    );\n}\n\nexport default Visual;","import React from 'react';\n\nfunction Title() {\n    return (\n        <div className=\"hero is-small has-background-grey-lighter\">\n            <div className=\"hero-body\">\n                <h1 className=\"title\">&lt;Visual CS&gt;</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport NavBar from './NavBar';\nimport About from './About';\nimport Home from './Home';\nimport Visual from './Vis';\nimport Title from './Title';\nimport './App.scss';\n\n\nfunction App() {\n  return (\n    <Router>\n\n      <Title />\n      \n      <NavBar />\n\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/about_us\">\n          <About />\n        </Route>\n        <Route exact path=\"/visualizations\">\n          <Visual />\n        </Route>\n      </Switch>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}